# Importamos las bibliotecas necesarias
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px

##########################################################
# CONFIGURACI칍N DEL DASHBOARD
##########################################################

# Configuraci칩n b치sica de la p치gina
st.set_page_config(layout='wide', initial_sidebar_state='expanded')

# Configuraci칩n simple para los gr치ficos
sns.set_style("whitegrid")

# T칤tulo principal del dashboard
st.title('游늵 Dashboard Supermarket Sales')

##################################################
# CARGA DE DATOS
##################################################

# Funci칩n para cargar datos con cache para mejorar rendimiento
@st.cache_data
def cargar_datos():
    # Carga el archivo CSV con datos macroecon칩micos
    df = pd.read_csv("data.csv")
    # Aseg칰rate de quitar espacios en los nombres de columnas si es necesario
    df = df.rename(columns=lambda x: x.strip())

    # Convertir Fecha a datetime
    df['Date'] = pd.to_datetime(df['Date'])
    #df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')#
    return df

# Cargamos los datos
df = cargar_datos()

##############################################
# CONFIGURACI칍N DE LA BARRA LATERAL
##############################################

# Simplificamos la barra lateral con solo lo esencial
st.sidebar.header('Filtros del Dashboard')
##############################################

#### FILTROS###

st.sidebar.header('Filtros del Dashboard')
F_linea = st.sidebar.multiselect(
    "L칤neas de Producto",
    options=df["Product line"].unique().tolist(),
    default=df["Product line"].unique().tolist(),
    help="Selecciona la o las categor칤as que se desean visualizar"
)

# FILTRO APLICADO
if F_linea:
    df_filtrado = df[df["Product line"].isin(F_linea)]
else:
    st.info("Seleccione al menos una l칤nea de producto.")
    st.stop()




    ##### PRIMERA LINEA VISUALIZACIONES####

# Secci칩n: Ventas e ingreso
st.subheader('Ingresos Supermarket Sales')
#Declaraci칩n columnas para dividir primera parte de graficos
c1,c2=st.columns([50,50])
with c1:

    Fig1=plt.figure(figsize=(10,5))
    df.groupby('Date')['Total'].count().plot(kind='line')
    plt.xlabel('Fecha')
    plt.title('Evoluci칩n de las ventas totales en el tiempo')
    plt.ylabel('Monto total de Ventas (USD)')
    plt.grid(True)
    st.pyplot(Fig1) 
    st.write("El gr치fico muestra la evoluci칩n de las ventas totales a lo largo del tiempo. Se observa que las ventas diarias no siguen una tendencia clara de crecimiento o disminuci칩n sostenida, lo que sugiere un comportamiento relativamente estable de la demanda durante el per칤odo analizado. No obstante, se identifican varios picos significativos de ventas, especialmente durante los meses de febrero y marzo. Estos aumentos podr칤an estar relacionados con promociones, eventos especiales o d칤as de alta demanda, como fines de semana o fechas festivas. Tras estos picos, se observa una disminuci칩n temporal en las ventas, lo cual es un comportamiento t칤pico luego de jornadas con alta actividad comercial.")
with c2:
    # Agrupar el total vendido por l칤nea de producto
    ingresos_por_producto = df_filtrado.groupby("Product line")["Total"].sum().sort_values()
    colores = sns.color_palette("pastel", n_colors=len(ingresos_por_producto))
    # Crear gr치fico con colores distintos por barra
    Fig2 = plt.figure(figsize=(10, 5))
    plt.barh(ingresos_por_producto.index, ingresos_por_producto.values, color=colores)
    plt.title('Ingresos por L칤nea de Producto')
    plt.xlabel('Total Vendido (USD)')
    plt.ylabel('L칤nea de Producto')
    plt.tight_layout()
    st.pyplot(Fig2)
    st.write("El gr치fico permite identificar que la l칤nea Food and Beverages genera el mayor ingreso total, mientras que Health and Beauty presenta el menor. Esta informaci칩n es crucial para definir estrategias comerciales, ya que permite focalizar esfuerzos en las l칤neas m치s rentables o reforzar aquellas con menor desempe침o para equilibrar la oferta y la demanda.")
### sector de comportamiento clientes
st.subheader('Comportamiento Clientes')
#Declaraci칩n columnas para dividir primera parte de graficos
c1,c2=st.columns([50,50])
with c1:
    Fig3 = plt.figure(figsize=(8, 4))
    sns.histplot(data=df, x='Rating', kde=True, bins=20, color='skyblue')
    plt.title('Distribuci칩n de la Calificaci칩n de Clientes')
    plt.xlabel('Calificaci칩n (Rating)')
    plt.ylabel('Frecuencia')
    plt.tight_layout()
    st.pyplot(Fig3)
    st.write('La distribuci칩n muestra que la mayor칤a de las calificaciones otorgadas por los clientes se concentran entre los valores de 6 y 8. Esto sugiere que, si bien no se alcanza con frecuencia la puntuaci칩n m치xima, la percepci칩n general del servicio y productos ofrecidos es positiva. Lo cual evidencia una oportunidad de mejora en la experiencia del cliente para incrementar los niveles de satisfacci칩n hacia rangos superiores.')
with c2:
    Fig4 = plt.figure(figsize=(8, 4))
    sns.boxplot(data=df, x='Customer type', y='Total', palette='Set2')
    plt.title('Comparaci칩n del Gasto por Tipo de Cliente')
    plt.xlabel('Tipo de Cliente')
    plt.ylabel('Total Vendido (USD)')
    plt.tight_layout()
    st.pyplot(Fig4)
    st.write('En el gr치fico se puede visualizar que los clientes del tipo Member tienden a realizar un mayor gasto promedio en comparaci칩n con los clientes Normal. No obstante, se identifican valores at칤picos elevados en ambos grupos, lo que indica que clientes Normal tambi칠n pueden efectuar compras significativas. Esta informaci칩n puede ser 칰til para dise침ar campa침as de fidelizaci칩n dirigidas a ambos segmentos.')
#Comportamiento de ingresos brutos en la tienda
st.subheader('Comportamiento ingresos brutos')
c1,c2=st.columns([50,50])
with c1:
    Fig5=plt.figure(figsize=(8,5))
    sns.scatterplot(data=df_filtrado, x='cogs', y='gross income')
    plt.title('Relaci칩n entre el costo de los productvos vendidos e ingreso Bruto')
    plt.xlabel('Total costo productos')
    plt.ylabel('Ingreso Bruto')
    st.pyplot(Fig5)
    st.write('El gr치fico muestra una relaci칩n lineal positiva entre el costo de los productos vendidos (cogs) y el ingreso bruto (gross income), lo cual sugiere que el ingreso se genera de forma proporcional al costo. Adicionalmente, no se observan variaciones significativas fuera de la l칤nea, por lo cual se puede asumir que los ingresos fueron relativamente proporcionales al costo.')
with c2:
    # Agrupar por Sucursal y L칤nea de Producto, sumando el ingreso bruto
    df_grouped = df_filtrado.groupby(['Branch', 'Product line'])['gross income'].sum().unstack(fill_value=0)

    # Crear gr치fico de barras apiladas
    fig6,ax= plt.subplots(figsize=(10, 6))

    df_grouped.plot(kind='bar',
                    stacked=True,
                    ax=ax,
                    colormap='Pastel2')  
    ax.tick_params(axis='x', rotation=0)
    ax.set_title('Ingreso Bruto por Sucursal y L칤nea de Producto')
    ax.set_xlabel('Sucursal')
    ax.set_ylabel('Ingreso Bruto (USD)')
    ax.legend(title='L칤nea de Producto', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    st.pyplot(fig6)
    st.write('El gr치fico evidencia que la sucursal C genera mayores ingresos brutos totales. Adem치s, se observa que en cada sucursal hay l칤neas de productos predominantes: Home and Lifestyle y Sports and Travel en la sucursal A; Health and Beauty y Sports and Travel en la B; y una distribuci칩n m치s equilibrada en la C. Estas diferencias podr칤an estar relacionadas con caracter칤sticas demogr치ficas o de consumo en las zonas geogr치ficas donde operan las sucursales.')

#Relaci칩n variables y metodos de pagos utilizados
st.subheader('Correlaci칩n n칰merica y M칠todos de pago utilizados')
c1,c2=st.columns([50,50])
with c1:
    #primero se creara un nuevo df el cual solamente contendra las variables n칰mericas, ya que para los modelos matematicos solamente se trabaja con valores n칰mericos.
    df_correlaci칩n=df.drop(['Branch','Customer type','Gender','Product line','Date','Time','Invoice ID','Payment','City','gross margin percentage'], axis=1)
    
    
    Fig7=plt.figure(figsize=(10,10))
    sns.heatmap(df_correlaci칩n.corr(), annot=True,cmap='RdYlGn',square=True)
    plt.title('Matriz de correlaci칩n de variables num칠ricas')    
    st.pyplot(Fig7)
    st.write('El gr치fico de correlaci칩n n칰merica, podemos interpretar que existen correlaciones muy fuertes entre las variables Total, cogs e ingreso bruto, lo cual es coherente, ya que el total de venta se basa en el precio por cantidad, y tanto el costo como el ingreso bruto dependen directamente de esos valores. En cambio, variables como Rating tienen correlaci칩n pr치cticamente nula con las dem치s, lo que indica que la calificaci칩n del cliente no est치 relacionada directamente con el monto de la venta ni la cantidad de productos comprados, dado que es una apreciaci칩n subjetiva del cliente.')

with c2:
    metodos_pago = df['Payment'].value_counts().reset_index()
    metodos_pago.columns = ['M칠todo de Pago', 'Cantidad']
    fig8 = px.pie(metodos_pago,
                        names='M칠todo de Pago',
                        values='Cantidad',
                        title='Distribuci칩n de M칠todos de Pago',
                        hole=0.4,
                        color_discrete_sequence=px.colors.qualitative.Set2)

    fig8.update_traces(textinfo='percent+label')
    st.plotly_chart(fig8)
    st.write('El gr치fico muestra que el m칠todo de pago mas utilizado por los clientes de la tienda de conveniencia son las Ewallet, seguidas del efectivo y finalmente las tarjetas de cr칠dito, esta infomaci칩n es relevante para realizar futuras promociones de acuerdo a los medios de pago utilizados por los clientes.')